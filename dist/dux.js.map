{"version":3,"sources":["../src/dux.js"],"names":["root","factory","define","amd","exports","module","dispatch","getState","setState","subscribe","middleware","unsubscribe","Dux","global","_store","state","components","applyMiddleware","action","call","Object","assign","mockStoreState","updateComponent","forEach","el","component","undefined","handler","push","index","splice","callback","Promise","resolve","then","data"],"mappings":";;AAAA,CAAE,WAAUA,IAAV,EAAgBC,OAAhB,EAAyB;AACzB,MAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgCA,OAAOC,GAA3C,EAAgD;AAC9CD,WAAO,EAAP,EAAWD,OAAX;AACD,GAFD,MAEO,IAAI,QAAOG,OAAP,yCAAOA,OAAP,OAAmB,QAAvB,EAAiC;AACtCC,WAAOD,OAAP,GAAiB;AACfE,gBAAUL,QAAQK,QADH;AAEfC,gBAAUN,QAAQM,QAFH;AAGfC,gBAAUP,QAAQO,QAHH;AAIfC,iBAAWR,QAAQQ,SAJJ;AAKfC,kBAAYT,QAAQS,UALL;AAMfC,mBAAaV,QAAQU;AANN,KAAjB;AAQD,GATM,MASA;AACLX,SAAKY,GAAL,GAAWX,OAAX;AACD;AACF,CAfC,EAeA,IAfA,EAeM,UAAUY,MAAV,EAAkB;AACxB;;;;AAIA,MAAID,MAAM;AACR;;;;AAIAE,YAAQ;AACN;;;;AAIAC,aAAO,EALD;AAMN;;;;AAIAC,kBAAY,EAVN;AAWNN,kBAAY;AAXN;AALA,GAAV;;AAoBA,WAASO,eAAT,CAA0BC,MAA1B,EAAkC;AAChC,WAAO,iBAAS;AACd,UAAIR,aAAaE,IAAIE,MAAJ,CAAWJ,UAA5B;AACA;;;AAGA,UAAI,OAAOA,UAAP,KAAsB,UAA1B,EAAsC;AACpCA,mBAAWS,IAAX,CAAgB,IAAhB,EAAsBD,MAAtB,EAA8BE,OAAOC,MAAP,CAAc,EAAd,EAAkBT,IAAIU,cAAtB,CAA9B;AACD;;AAED,aAAOJ,MAAP;AACD,KAVD;AAWD;;AAED,WAASK,eAAT,CAA0BL,MAA1B,EAAkC;AAChCN,QAAIE,MAAJ,CAAWE,UAAX,CAAsBQ,OAAtB,CAA8B,cAAM;AAClC,UAAIC,GAAGC,SAAH,KAAiBC,SAAjB,IAA8B,OAAOF,GAAGG,OAAV,KAAsB,UAAxD,EAAoE;AAClEH,WAAGG,OAAH,CAAWV,MAAX;AACD;AACF,KAJD;AAKA,WAAOA,MAAP;AACD;AACD,SAAO;AACL;;;;;;AAMAT,eAAW,mBAACiB,SAAD,EAAYE,OAAZ,EAAwB;AACjChB,UACGE,MADH,CAEGE,UAFH,CAGGa,IAHH,CAGQ,EAACH,oBAAD,EAAYE,gBAAZ,EAHR;AAID,KAZI;AAaLjB,iBAAa,qBAACe,SAAD,EAAe;AAC1B,UAAIV,aAAaJ,IAAIE,MAAJ,CAAWE,UAA5B;AACAA,iBAAWQ,OAAX,CAAmB,UAACC,EAAD,EAAKK,KAAL,EAAe;AAChC,YAAIL,OAAOC,SAAX,EAAsB;AACpBV,qBAAWe,MAAX,CAAkBD,KAAlB,EAAyB,CAAzB;AACD;AACF,OAJD;AAKD,KApBI;AAqBL;;;;;;AAMApB,gBAAY,8BAAY;AACtBE,UAAIE,MAAJ,CAAWJ,UAAX,GAAwBsB,QAAxB;AACD,KA7BI;AA8BL;;;;;;;AAOA1B,cAAU,kBAACY,MAAD,EAAY;AACpB,aAAOe,QACJC,OADI,CACIhB,MADJ,EAEJiB,IAFI,CAEClB,gBAAgBC,MAAhB,CAFD,EAGJiB,IAHI,CAGCZ,eAHD,CAAP;AAID,KA1CI;AA2CL;;;;;AAKAf,cAAU,kBAAC4B,IAAD,EAAU;AAClB;AACAhB,aAAOC,MAAP,CAAcT,IAAIE,MAAJ,CAAWC,KAAzB,EAAgCqB,IAAhC;AACD,KAnDI;AAoDL;;;;AAIA7B,cAAU,oBAAM;AACd,aAAOa,OAAOC,MAAP,CAAc,EAAd,EAAkBT,IAAIE,MAAJ,CAAWC,KAA7B,CAAP;AACD;AA1DI,GAAP;AA4DD,CA3GO,CA2GN,IA3GM,CAfN,CAAD","file":"dux.js","sourcesContent":[";(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory)\n  } else if (typeof exports === 'object') {\n    module.exports = {\n      dispatch: factory.dispatch,\n      getState: factory.getState,\n      setState: factory.setState,\n      subscribe: factory.subscribe,\n      middleware: factory.middleware,\n      unsubscribe: factory.unsubscribe\n    }\n  } else {\n    root.Dux = factory\n  }\n}(this, function (global) {\n  /**\n   * @name Dux\n   * @description The object that will manage all application state\n   */\n  let Dux = {\n    /**\n     * @name _store\n     * @description The private store\n     */\n    _store: {\n      /**\n       * @name state\n       * @description The Store application state\n       */\n      state: {},\n      /**\n       * @name state\n       * @description The Components that was subscribed\n       */\n      components: [],\n      middleware: {}\n    }\n  }\n\n  function applyMiddleware (action) {\n    return value => {\n      let middleware = Dux._store.middleware\n      /**\n         * has middleware?\n         **/\n      if (typeof middleware === 'function') {\n        middleware.call(null, action, Object.assign({}, Dux.mockStoreState))\n      }\n\n      return action\n    }\n  }\n\n  function updateComponent (action) {\n    Dux._store.components.forEach(el => {\n      if (el.component !== undefined && typeof el.handler === 'function') {\n        el.handler(action)\n      }\n    })\n    return action\n  }\n  return {\n    /**\n     * @name subscribe\n     * @description Subscribe to call the handler function when the action will be triggered\n     * @param {Component} component The Component\n     * @param {Function} handler The function that will be called\n     **/\n    subscribe: (component, handler) => {\n      Dux\n        ._store\n        .components\n        .push({component, handler})\n    },\n    unsubscribe: (component) => {\n      let components = Dux._store.components\n      components.forEach((el, index) => {\n        if (el === component) {\n          components.splice(index, 1)\n        }\n      })\n    },\n    /**\n     * @name middleware\n     * @description The middleware function that will be triggered\n     * every time when an action called.\n     * @param {Function} callback A function that will be called\n     **/\n    middleware: callback => {\n      Dux._store.middleware = callback\n    },\n    /**\n     * @name dispatch\n     * @description Dispatch an action to change\n     * the store state\n     * @param { string } action The action name\n     * @param { any } args Arguments sended to the action\n     */\n    dispatch: (action) => {\n      return Promise\n        .resolve(action)\n        .then(applyMiddleware(action))\n        .then(updateComponent)\n    },\n    /**\n     * @name setState\n     * @description Sets the application data state\n     * @param {object} data Simple Object that contain the State\n     */\n    setState: (data) => {\n      // setting the immutable initial stat return Dux.storee\n      Object.assign(Dux._store.state, data)\n    },\n    /**\n     * @name getState\n     * @return {Object} a copy of the state\n     */\n    getState: () => {\n      return Object.assign({}, Dux._store.state)\n    }\n  }\n}(this)))"]}