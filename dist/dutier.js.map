{"version":3,"sources":["../src/dutier.js"],"names":["root","factory","define","amd","exports","module","dispatch","getState","createStore","subscribe","middleware","unsubscribe","Dutier","global","_store","state","components","reducer","applyReducer","action","ret","reducers","Object","assign","keys","forEach","value","call","type","updateComponent","el","component","undefined","handler","push","index","splice","callback","Promise","resolve","then","i","combine","len","length"],"mappings":"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","file":"dutier.js","sourcesContent":[";(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory)\n  } else if (typeof exports === 'object') {\n    module.exports = {\n      dispatch: factory.dispatch,\n      getState: factory.getState,\n      createStore: factory.createStore,\n      subscribe: factory.subscribe,\n      middleware: factory.middleware,\n      unsubscribe: factory.unsubscribe\n    }\n  } else {\n    root.Dutier = factory\n  }\n}(this, function (global) {\n  /**\n   * @name Dutier\n   * @description The object that will manage all application state\n   */\n  let Dutier = {\n    /**\n     * @name _store\n     * @description The private store\n     */\n    _store: {\n      /**\n       * @name state\n       * @description The Store application state\n       */\n      state: {},\n      /**\n       * @name state\n       * @description The Components that was subscribed\n       */\n      components: [],\n      /**\n       * @name reducer\n       * @description The reducer function\n       */ \n      reducer: {}\n    }\n  }\n  \n  // Apply the reducers function\n  function applyReducer ( action ) {\n    let ret=null\n    const reducers = Dutier._store.reducer\n    const state = Object.assign({}, Dutier._store.state)\n    Object.keys(reducers)\n      .forEach( reducer => {\n        const value = reducers[reducer].call(null, state, action)\n        if ( value !== state) { return ret = value }\n        ret = value; \n      })\n      \n    return Object.assign({}, { type: action.type } , { state: Object.assign({}, state, ret) } )\n  }\n  \n  // update the component\n  function updateComponent (action) {\n    Dutier._store.components.forEach(el => {\n      if (el.component !== undefined && typeof el.handler === 'function') {\n        el.handler(action)\n      }\n    })\n    return action\n  }\n  return {\n    /**\n     * @name subscribe\n     * @description Subscribe to call the handler function when the action will be triggered\n     * @param {Component} component The Component\n     * @param {Function} handler The function that will be called\n     **/\n    subscribe: (component, handler) => {\n      Dutier\n        ._store\n        .components\n        .push({component, handler})\n    },\n    /**\n     * @name unsubscribe\n     * @description Unsubscribes from listening to a component\n     * @param {Component} component The Component\n     **/\n    unsubscribe: (component) => {\n      let components = Dutier._store.components\n      components.forEach((el, index) => {\n        if (el === component) {\n          components.splice(index, 1)\n        }\n      })\n    },\n    /**\n     * @name middleware\n     * @description The middleware function that will be triggered\n     * every time when an action called.\n     * @param {Function} callback A function that will be called\n     **/\n    middleware: callback => {\n      Dutier._store.middleware = callback\n    },\n    /**\n     * @name dispatch\n     * @description Dispatch an action to change\n     * the store state\n     * @param { string } action The action name\n     */\n    dispatch: (action) => {\n      return Promise\n        .resolve(action)\n        .then(applyReducer)\n        .then(updateComponent)\n    },\n    /**\n     * @name createStore\n     * @description Sets the application data state\n     * @param {object} data Simple Object that contain the State\n     */\n    createStore: ( state, ...reducers ) => {\n      // register reducers\n      reducers.forEach( (reducer, i ) => Dutier._store.reducer[ i ] = reducer);\n      // setting the immutable initial state return Dutier.store\n      Object.assign(Dutier._store.state, state)\n    },\n    /**\n     * @name combine\n     * @description Combine the reducers\n     */\n    combine: ( ...reducers ) => {\n      const len =  Object.keys(Dutier._store.reducer).length\n      reducers.forEach( reducer => Dutier._store.reducer[len + 1] = reducer)\n    },\n    /**\n     * @name getState\n     * @return {Object} a copy of the state\n     */\n    getState: () => {\n      return Object.assign({}, Dutier._store.state)\n    }\n  }\n}(this)))\n"]}