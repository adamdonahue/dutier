{"version":3,"sources":["../src/dutier.js"],"names":["root","factory","define","amd","exports","module","dispatch","getState","createStore","subscribe","combine","Dutier","global","_state","_initialState","_handlers","_reducers","applyReducer","action","initialState","Object","assign","actualState","keys","forEach","value","reducer","call","JSON","stringify","type","state","applyHandler","handler","undefined","push","unsubscribe","fn","index","splice","payload","Promise","resolve","then","len","length","reducers"],"mappings":"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","file":"dutier.js","sourcesContent":[";(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory)\n  } else if (typeof exports === 'object') {\n    module.exports = {\n      dispatch: factory.dispatch,\n      getState: factory.getState,\n      createStore: factory.createStore,\n      subscribe: factory.subscribe,\n      combine: factory.combine,\n    }\n  } else {\n    root.Dutier = factory\n  }\n}(this, function(global) {\n /**\n  * @name _state\n  * @description The actual store application state\n  */\n  const _state = {}\n  /**\n  * @name _initialState\n  * @description The initial store application state\n  */\n  const _initialState = {}\n  /**\n  * @name _handlers\n  * @description The subscribe handlers function\n  */\n  const _handlers = []\n  /**\n  * @name _reducers\n  * @description The action reducers\n  */\n  const _reducers = {}\n  \n  // apply the correspondent action reducer\n  function applyReducer( action ) {\n    const initialState = Object.assign({}, _initialState)\n    const actualState = Object.assign(initialState, _state)\n    Object.keys(_reducers)\n      .forEach( reducer => {\n        const value = _reducers[reducer].call(null, actualState, action)\n        if ( JSON.stringify(value) !== JSON.stringify(actualState) ) {\n          return Object.assign(_state, initialState, value)\n        }\n      })\n    return Object.assign({}, { type: action.type } , { state: Object.assign({}, _state) })\n  }\n  // apply all subscribe handlers\n  function applyHandler( { type } ) {\n    const state = Object.assign({}, _state)\n    _handlers.forEach( handler => {\n      if (handler !== undefined && typeof handler === 'function') {\n        handler({ type, state })\n      }\n    })\n    return { type, state }\n  }\n  /**\n   * @name subscribe\n   * @description Subscribe to call the handler function when the action will be triggered\n   * @param {Function} handler The function that will be called\n   **/\n  function subscribe( handler ){\n    _handlers.push(handler)\n    return () => {\n      unsubscribe(handler)\n    }\n  }\n  /**\n   * @name unsubscribe\n   * @description Unsubscribes from listening to a component\n   * @param {Function} handler The handler function\n   **/\n  function unsubscribe( handler ) {\n    _handlers.forEach( ( fn, index ) => {\n      if ( fn === handler) {\n        _handlers.splice(index, 1)\n      }\n    })\n  }\n  /**\n   * @name dispatch\n   * @description Dispatch an action to change\n   * the store state\n   * @param { Object } payload The action payload\n   */  \n  function dispatch ( payload ) {\n    return Promise.resolve(payload)\n        .then(applyReducer)\n        .then(applyHandler)\n  }\n  /**\n   * @name combine\n   * @description Combine the reducers\n   */  \n  function combine( ...reducers ) {\n    let len =  Object.keys(_reducers).length\n    reducers.forEach( reducer => { _reducers[len + 1] = reducer; len++ })\n  }\n  /**\n  * @name createStore\n  * @description Sets the application data state\n  * @param {Object} data Simple Object that contain the State\n  */\n  function createStore ( initialState, ...reducers ) {\n    reducers.forEach( ( reducer, index ) => _reducers[index] = reducer )\n    Object.assign(_initialState, initialState)\n  }\n  /**\n   * @name getState\n   * @return {Object} a copy of the state\n   */  \n  function getState() {\n    return Object.assign({}, _initialState, _state)\n  }\n  \n  return {\n    createStore,\n    combine,\n    subscribe,\n    getState,\n    dispatch\n  }\n}(this)))"]}