{"version":3,"file":"dutier.js","sources":["../src/providers.js","../src/updateState.js","../src/createStore.js","../src/asyncReducer.js","../src/applyHandler.js","../src/dispatch.js","../src/getState.js","../src/combine.js","../src/unsubscribe.js","../src/subscribe.js"],"sourcesContent":["/**\n * The Providers\n */ \nexport const Provider = {\n  _reducers: {},\n  _handlers: [],\n  _updateState: function(){}\n}","/**\n * Creates a Dutier store that holds the state tree.\n * The only way to change the data in the store is to call `dispatch()` on it.\n * @param { Object } state The initial application state\n * @return {Function} currentState Return a function that\n * update and return the current state\n */\nexport default ( state ) => {\n  return ( function( state ) {\n    var state = Object.assign({}, state)\n    return current => {\n      state = Object.assign({}, state, current)\n      return state\n    }\n  }(state))\n}\n","import { Provider } from './providers'\nimport create from './updateState'\n \n /**\n  * @name createStore\n  * @description Sets the store state\n  * @param {Object} data Simple Object that contain the State\n  * @param {Function} reducers The action reducers\n  */\n  export default ( state, ...reducers ) => {\n    reducers.forEach( ( reducer, index ) => Provider._reducers[index] = reducer )\n    Provider._updateState = create(state)\n  }","import { Provider } from './providers'\n\n/**\n * Async Reducer\n * Just dispatch if return new state values.\n * With this, the subscribe function will not be\n * called unnecessary, because the state don't be changed\n */\nexport default (action) => {\n  return new Promise( (resolve, reject )=> {\n    Object.keys(Provider._reducers)\n      .forEach( reducer => {\n        const asyncReducer = new Promise(resolve => Provider._reducers[reducer].call(null, resolve, Provider._updateState({}), action))\n        asyncReducer.then( state => {\n          if (JSON.stringify(state) !== JSON.stringify(Provider._updateState({}))) {\n            resolve({type: action.type, state: Provider._updateState(state) })\n          }\n        })\n      })\n  })\n}\n","import { Provider } from './providers'\n\n/**\n * Apply the subscribe handler functions\n */ \nexport default ({ type, state }) => {\n  Provider._handlers.forEach(handler => {\n    if (handler !== undefined && typeof handler === 'function') {\n      handler({ type, state})\n    }\n  })\n  return { type, state}\n}\n","import asyncReducer from './asyncReducer'\nimport applyHandler from './applyHandler'\n\n/**\n   * @name dispatch\n   * @description Dispatch an action to change\n   * the store state\n   * @param { Object } payload The action payload\n   */  \n  export default  ( payload ) => {\n    return Promise.resolve(payload)\n        .then(asyncReducer)\n        .then(applyHandler)\n  }","import {Provider} from './providers'\n\n/**\n * @name getState\n * @return {Object} a copy of the state\n */\nexport default () => {\n  return Provider._updateState({})\n}\n","import {Provider} from './providers'\n\n/**\n * @name combine\n * @description Combine the reducers\n */  \nexport default ( ...reducers ) => {\n  let len =  Object.keys(Provider._reducers).length\n  reducers.forEach( reducer => { Provider._reducers[len + 1] = reducer; len++ })\n}","import { Provider } from './providers'\n\n/**\n   * @name unsubscribe\n   * @description Unsubscribes from listening to a component\n   * @param {Function} handler The handler function\n   **/\n  export default ( handler ) => {\n    Provider._handlers.forEach( ( fn, index ) => {\n      if ( fn === handler) {\n        Provider._handlers.splice(index, 1)\n      }\n    })\n  }","import { Provider } from './providers'\nimport unsubscribe from './unsubscribe'\n\n/**\n   * @name subscribe\n   * @description Subscribe to call the handler function when the action will be triggered\n   * @param {Function} handler The function that will be called\n   **/\nexport default (handler) => {\n  Provider._handlers.push(handler)\n  return () => {\n    unsubscribe(handler)\n  }\n}\n"],"names":["Provider","state","Object","assign","current","reducers","forEach","reducer","index","_reducers","_updateState","create","action","Promise","resolve","reject","keys","asyncReducer","call","then","JSON","stringify","type","_handlers","handler","undefined","payload","applyHandler","len","length","fn","splice","push"],"mappings":";;;;;;;;;;;;AAAA;;;AAGA,AAAO,IAAMA,WAAW;aACX,EADW;aAEX,EAFW;gBAGR,wBAAU;CAHnB;;ACHP;;;;;;;AAOA,cAAe,UAAEC,KAAF,EAAa;SACjB,UAAUA,KAAV,EAAkB;QACrBA,QAAQC,OAAOC,MAAP,CAAc,EAAd,EAAkBF,KAAlB,CAAZ;WACO,mBAAW;cACRC,OAAOC,MAAP,CAAc,EAAd,EAAkBF,KAAlB,EAAyBG,OAAzB,CAAR;aACOH,KAAP;KAFF;GAFO,CAMPA,KANO,CAAT;CADF;;ACJC;;;;;;AAMC,mBAAe,UAAEA,KAAF,EAA0B;oCAAdI,QAAc;YAAA;;;WAC9BC,OAAT,CAAkB,UAAEC,OAAF,EAAWC,KAAX;WAAsBR,SAASS,SAAT,CAAmBD,KAAnB,IAA4BD,OAAlD;GAAlB;WACSG,YAAT,GAAwBC,OAAOV,KAAP,CAAxB;CAFF;;ACPF;;;;;;AAMA,oBAAe,UAACW,MAAD,EAAY;SAClB,IAAIC,OAAJ,CAAa,UAACC,OAAD,EAAUC,MAAV,EAAqB;WAChCC,IAAP,CAAYhB,SAASS,SAArB,EACGH,OADH,CACY,mBAAW;UACbW,eAAe,IAAIJ,OAAJ,CAAY;eAAWb,SAASS,SAAT,CAAmBF,OAAnB,EAA4BW,IAA5B,CAAiC,IAAjC,EAAuCJ,OAAvC,EAAgDd,SAASU,YAAT,CAAsB,EAAtB,CAAhD,EAA2EE,MAA3E,CAAX;OAAZ,CAArB;mBACaO,IAAb,CAAmB,iBAAS;YACtBC,KAAKC,SAAL,CAAepB,KAAf,MAA0BmB,KAAKC,SAAL,CAAerB,SAASU,YAAT,CAAsB,EAAtB,CAAf,CAA9B,EAAyE;kBAC/D,EAACY,MAAMV,OAAOU,IAAd,EAAoBrB,OAAOD,SAASU,YAAT,CAAsBT,KAAtB,CAA3B,EAAR;;OAFJ;KAHJ;GADK,CAAP;CADF;;ACNA;;;AAGA,oBAAe,gBAAqB;MAAlBqB,IAAkB,QAAlBA,IAAkB;MAAZrB,KAAY,QAAZA,KAAY;;WACzBsB,SAAT,CAAmBjB,OAAnB,CAA2B,mBAAW;QAChCkB,YAAYC,SAAZ,IAAyB,OAAOD,OAAP,KAAmB,UAAhD,EAA4D;cAClD,EAAEF,UAAF,EAAQrB,YAAR,EAAR;;GAFJ;SAKO,EAAEqB,UAAF,EAAQrB,YAAR,EAAP;CANF;;ACFA;;;;;;AAME,gBAAgB,UAAEyB,OAAF,EAAe;UACtBb,QAAQC,OAAR,CAAgBY,OAAhB,EACFP,IADE,CACGF,YADH,EAEFE,IAFE,CAEGQ,YAFH,CAAP;CADF;;ACPF;;;;AAIA,gBAAe,YAAM;SACZ3B,SAASU,YAAT,CAAsB,EAAtB,CAAP;CADF;;ACJA;;;;AAIA,eAAe,YAAmB;oCAAdL,QAAc;YAAA;;;MAC5BuB,MAAO1B,OAAOc,IAAP,CAAYhB,SAASS,SAArB,EAAgCoB,MAA3C;WACSvB,OAAT,CAAkB,mBAAW;aAAWG,SAAT,CAAmBmB,MAAM,CAAzB,IAA8BrB,OAA9B,CAAuCqB;GAAtE;CAFF;;ACJA;;;;;AAKE,mBAAe,UAAEJ,OAAF,EAAe;WACnBD,SAAT,CAAmBjB,OAAnB,CAA4B,UAAEwB,EAAF,EAAMtB,KAAN,EAAiB;QACtCsB,OAAON,OAAZ,EAAqB;eACVD,SAAT,CAAmBQ,MAAnB,CAA0BvB,KAA1B,EAAiC,CAAjC;;GAFJ;CADF;;ACJF;;;;;AAKA,iBAAe,UAACgB,OAAD,EAAa;WACjBD,SAAT,CAAmBS,IAAnB,CAAwBR,OAAxB;SACO,YAAM;gBACCA,OAAZ;GADF;CAFF;;;;;;;;;;"}